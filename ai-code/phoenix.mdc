---
alwaysApply: true
---

## 项目结构

### 核心配置

- [config/config.ts](mdc:config/config.ts) - UmiJS 主配置，包含路由、代理和插件
- [config/routes.ts](mdc:config/routes.ts) - 应用路由配置
- [config/defaultSettings.ts](mdc:config/defaultSettings.ts) - 默认布局和主题设置
- [config/proxy.ts](mdc:config/proxy.ts) - 不同环境下的 API 代理配置

### 应用入口

- [src/app.tsx](mdc:src/app.tsx) - 主应用组件，包含布局、认证和全局状态
- [src/global.tsx](mdc:src/global.tsx) - 全局应用初始化

### 主要目录

- `src/pages/` - 按功能组织的页面组件
- `src/services/` - API 服务层，集成 Phoenix 后端
- `src/components/` - 可复用 UI 组件
- `src/hooks/` - 自定义 React hooks
- `src/utils/` - 工具函数和常量

## 技术栈

- **前端**：React 18，Ant Design Pro
- **构建工具**：UmiJS 4
- **状态管理**：UmiJS 内置数据流
- **UI 框架**：Ant Design 5
- **图表/可视化**：AntV G6
- **表单管理**：Formily
- **日期处理**：DayJS

# 编码规范与约定

## 文件组织

- 按业务领域分组相关文件
- 页面组件放在 `src/pages/` 下，按业务域组织
- 接口定义在 `src/services/` 下，按业务域组织
- 每个页面一个文件夹 + index.tsx 模式
- ts 类型定义放在 `src/pages`下，业务域目录中每个页面或模块一个独立的 types.d.ts 文件,项目级别的自定义全局类型定义在 src/typing.d.ts 文件里

## ts 类型定义

```
├── src/
│   ├── pages/                  # 页面组件（约定式路由）
│       ├── User/
│           ├── index.tsx
│           └── types.d.ts        # User 页面相关类型
│   ├── components/             # 通用组件
│   ├── models/                 # 数据模型（配合 plugin-model 插件）
│   │   └── user.ts
│   ├── services/               # 请求封装
│   ├── layouts/                # 布局组件（如 layout.tsx）
│   ├── utils/                  # 工具函数
│   ├── global.less             # 全局样式
│   └── typings.d.ts            # 项目级别的自定义全局类型定义
```

## 组件结构

- 使用函数式组件和 hooks
- 默认导出组件
- 类型定义放在业务域目录的 `types.d.ts` 文件
- API 响应和 props 使用 TypeScript 接口

## 命名约定

- **组件**：PascalCase（如 `CustomerList.tsx`）
- **Hooks**：以 use 开头的 camelCase（如 `useCustomerColumns.ts`）
- **服务**：camelCase（如 `customerList.ts`）
- **类型**：PascalCase，具描述性（如 `CustomerListItem`）
- **常量**：UPPER_SNAKE_CASE（如 `API_ENDPOINTS`）

## 导入顺序

```typescript
// 1. React 及外部库
import React from 'react';
import { Table, Button } from 'antd';

// 2. 内部组件和工具
import { CustomerSelect } from '@/components/Common';
import { useCustomerColumns } from '@/hooks';

// 3. 类型和常量
import type { CustomerListItem } from './typings.d.ts';
import { API_ENDPOINTS } from '@/utils/constants';

// 4. 样式
import './index.less';
```

## API 服务模式

- API 类型放在业务域目录的 `types.d.ts` 文件

## 表单处理

- 表单用 Formily，JSON schema 模式
- 前后端均需校验数据

## 状态管理

- 全局状态用 UmiJS 内置数据流
- 局部状态用 React hooks
- 复杂状态推荐 use-immer

## 错误处理

- 异步操作用 try-catch
- 友好提示用户错误
- 适当记录日志便于调试

## 获取列表接口传参格式

{ pageNo: 0, pageSize: 0, filters: { /\*_ 业务查询条件 _/ } }

列表的 columns 的定义放在函数式组件内部，否则获取不到 react 组件内部的状态

## 请求配置

### 全局请求设置

- [src/requestErrorConfig.ts](mdc:src/requestErrorConfig.ts) - 全局请求拦截处理
- [config/proxy.ts](mdc:config/proxy.ts) - 环境特定的代理配置

## 数据流模式

### 表单提交

```typescript
// 表单提交模式
const handleSubmit = async (values: any) => {
  try {
    await createUser(values);
    message.success('创建成功');
    // 刷新数据或导航
  } catch (error) {
    message.error('创建失败');
  }
};
```

## 核心 UI 框架

### Ant Design Pro 集成

- 基于 Ant Design 5.x 和 Pro Components 构建
- 使用 UmiJS 进行路由和布局管理
- 实现响应式设计模式

## 样式指南

### CSS/Less 组织

- [src/global.less](mdc:src/global.less) - 全局样式
- 组件特定样式在 `index.less` 文件中
- 使用 CSS 模块进行组件隔离

### 响应式设计

- 移动优先方法
- 使用 Ant Design 的响应式工具
- 在多个屏幕尺寸上测试

## 组件开发指南

### 创建新组件

1. 使用 hooks 的函数式组件
2. 实现适当的 TypeScript 接口
3. 添加全面的 prop 验证
4. 为复杂逻辑编写单元测试

### 组件组合

- 使用 render props 或 children 实现灵活性
- 保持组件专注和单一职责

### 性能优化

- 对昂贵的组件使用 React.memo
- 为列表实现适当的 key props
- 避免不必要的重新渲染
- 对大型组件使用懒加载
